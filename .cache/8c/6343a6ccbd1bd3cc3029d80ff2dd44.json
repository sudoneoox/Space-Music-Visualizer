{"id":"node_modules/av/src/core/bitstream.coffee","dependencies":[{"name":"C:\\Users\\Diego\\Downloads\\Documents\\three js\\AbsurbPlace\\package.json","includedInParent":true,"mtime":1624288368876},{"name":"C:\\Users\\Diego\\Downloads\\Documents\\three js\\AbsurbPlace\\node_modules\\av\\package.json","includedInParent":true,"mtime":1624288427802}],"generated":{"js":"(function() {\n  var Bitstream;\n\n  Bitstream = class Bitstream {\n    constructor(stream) {\n      this.stream = stream;\n      this.bitPosition = 0;\n    }\n\n    copy() {\n      var result;\n      result = new Bitstream(this.stream.copy());\n      result.bitPosition = this.bitPosition;\n      return result;\n    }\n\n    offset() { // Should be a property\n      return 8 * this.stream.offset + this.bitPosition;\n    }\n\n    available(bits) {\n      return this.stream.available((bits + 8 - this.bitPosition) / 8);\n    }\n\n    advance(bits) {\n      var pos;\n      pos = this.bitPosition + bits;\n      this.stream.advance(pos >> 3);\n      return this.bitPosition = pos & 7;\n    }\n\n    rewind(bits) {\n      var pos;\n      pos = this.bitPosition - bits;\n      this.stream.rewind(Math.abs(pos >> 3));\n      return this.bitPosition = pos & 7;\n    }\n\n    seek(offset) {\n      var curOffset;\n      curOffset = this.offset();\n      if (offset > curOffset) {\n        return this.advance(offset - curOffset);\n      } else if (offset < curOffset) {\n        return this.rewind(curOffset - offset);\n      }\n    }\n\n    align() {\n      if (this.bitPosition !== 0) {\n        this.bitPosition = 0;\n        return this.stream.advance(1);\n      }\n    }\n\n    read(bits, signed) {\n      var a, a0, a1, a2, a3, a4, mBits;\n      if (bits === 0) {\n        return 0;\n      }\n      mBits = bits + this.bitPosition;\n      if (mBits <= 8) {\n        a = ((this.stream.peekUInt8() << this.bitPosition) & 0xff) >>> (8 - bits);\n      } else if (mBits <= 16) {\n        a = ((this.stream.peekUInt16() << this.bitPosition) & 0xffff) >>> (16 - bits);\n      } else if (mBits <= 24) {\n        a = ((this.stream.peekUInt24() << this.bitPosition) & 0xffffff) >>> (24 - bits);\n      } else if (mBits <= 32) {\n        a = (this.stream.peekUInt32() << this.bitPosition) >>> (32 - bits);\n      } else if (mBits <= 40) {\n        a0 = this.stream.peekUInt8(0) * 0x0100000000; // same as a << 32\n        a1 = this.stream.peekUInt8(1) << 24 >>> 0;\n        a2 = this.stream.peekUInt8(2) << 16;\n        a3 = this.stream.peekUInt8(3) << 8;\n        a4 = this.stream.peekUInt8(4);\n        a = a0 + a1 + a2 + a3 + a4;\n        a %= Math.pow(2, 40 - this.bitPosition); // (a << bitPosition) & 0xffffffffff\n        a = Math.floor(a / Math.pow(2, 40 - this.bitPosition - bits)); // a >>> (40 - bits)\n      } else {\n        throw new Error(\"Too many bits!\");\n      }\n      if (signed) {\n        // if the sign bit is turned on, flip the bits and \n        // add one to convert to a negative value\n        if (mBits < 32) {\n          if (a >>> (bits - 1)) {\n            a = ((1 << bits >>> 0) - a) * -1;\n          }\n        } else {\n          if (a / Math.pow(2, bits - 1) | 0) {\n            a = (Math.pow(2, bits) - a) * -1;\n          }\n        }\n      }\n      this.advance(bits);\n      return a;\n    }\n\n    peek(bits, signed) {\n      var a, a0, a1, a2, a3, a4, mBits;\n      if (bits === 0) {\n        return 0;\n      }\n      mBits = bits + this.bitPosition;\n      if (mBits <= 8) {\n        a = ((this.stream.peekUInt8() << this.bitPosition) & 0xff) >>> (8 - bits);\n      } else if (mBits <= 16) {\n        a = ((this.stream.peekUInt16() << this.bitPosition) & 0xffff) >>> (16 - bits);\n      } else if (mBits <= 24) {\n        a = ((this.stream.peekUInt24() << this.bitPosition) & 0xffffff) >>> (24 - bits);\n      } else if (mBits <= 32) {\n        a = (this.stream.peekUInt32() << this.bitPosition) >>> (32 - bits);\n      } else if (mBits <= 40) {\n        a0 = this.stream.peekUInt8(0) * 0x0100000000; // same as a << 32\n        a1 = this.stream.peekUInt8(1) << 24 >>> 0;\n        a2 = this.stream.peekUInt8(2) << 16;\n        a3 = this.stream.peekUInt8(3) << 8;\n        a4 = this.stream.peekUInt8(4);\n        a = a0 + a1 + a2 + a3 + a4;\n        a %= Math.pow(2, 40 - this.bitPosition); // (a << bitPosition) & 0xffffffffff\n        a = Math.floor(a / Math.pow(2, 40 - this.bitPosition - bits)); // a >>> (40 - bits)\n      } else {\n        throw new Error(\"Too many bits!\");\n      }\n      if (signed) {\n        // if the sign bit is turned on, flip the bits and \n        // add one to convert to a negative value\n        if (mBits < 32) {\n          if (a >>> (bits - 1)) {\n            a = ((1 << bits >>> 0) - a) * -1;\n          }\n        } else {\n          if (a / Math.pow(2, bits - 1) | 0) {\n            a = (Math.pow(2, bits) - a) * -1;\n          }\n        }\n      }\n      return a;\n    }\n\n    readLSB(bits, signed) {\n      var a, mBits;\n      if (bits === 0) {\n        return 0;\n      }\n      if (bits > 40) {\n        throw new Error(\"Too many bits!\");\n      }\n      mBits = bits + this.bitPosition;\n      a = (this.stream.peekUInt8(0)) >>> this.bitPosition;\n      if (mBits > 8) {\n        a |= (this.stream.peekUInt8(1)) << (8 - this.bitPosition);\n      }\n      if (mBits > 16) {\n        a |= (this.stream.peekUInt8(2)) << (16 - this.bitPosition);\n      }\n      if (mBits > 24) {\n        a += (this.stream.peekUInt8(3)) << (24 - this.bitPosition) >>> 0;\n      }\n      if (mBits > 32) {\n        a += (this.stream.peekUInt8(4)) * Math.pow(2, 32 - this.bitPosition);\n      }\n      if (mBits >= 32) {\n        a %= Math.pow(2, bits);\n      } else {\n        a &= (1 << bits) - 1;\n      }\n      if (signed) {\n        // if the sign bit is turned on, flip the bits and \n        // add one to convert to a negative value\n        if (mBits < 32) {\n          if (a >>> (bits - 1)) {\n            a = ((1 << bits >>> 0) - a) * -1;\n          }\n        } else {\n          if (a / Math.pow(2, bits - 1) | 0) {\n            a = (Math.pow(2, bits) - a) * -1;\n          }\n        }\n      }\n      this.advance(bits);\n      return a;\n    }\n\n    peekLSB(bits, signed) {\n      var a, mBits;\n      if (bits === 0) {\n        return 0;\n      }\n      if (bits > 40) {\n        throw new Error(\"Too many bits!\");\n      }\n      mBits = bits + this.bitPosition;\n      a = (this.stream.peekUInt8(0)) >>> this.bitPosition;\n      if (mBits > 8) {\n        a |= (this.stream.peekUInt8(1)) << (8 - this.bitPosition);\n      }\n      if (mBits > 16) {\n        a |= (this.stream.peekUInt8(2)) << (16 - this.bitPosition);\n      }\n      if (mBits > 24) {\n        a += (this.stream.peekUInt8(3)) << (24 - this.bitPosition) >>> 0;\n      }\n      if (mBits > 32) {\n        a += (this.stream.peekUInt8(4)) * Math.pow(2, 32 - this.bitPosition);\n      }\n      if (mBits >= 32) {\n        a %= Math.pow(2, bits);\n      } else {\n        a &= (1 << bits) - 1;\n      }\n      if (signed) {\n        // if the sign bit is turned on, flip the bits and \n        // add one to convert to a negative value\n        if (mBits < 32) {\n          if (a >>> (bits - 1)) {\n            a = ((1 << bits >>> 0) - a) * -1;\n          }\n        } else {\n          if (a / Math.pow(2, bits - 1) | 0) {\n            a = (Math.pow(2, bits) - a) * -1;\n          }\n        }\n      }\n      return a;\n    }\n\n  };\n\n  module.exports = Bitstream;\n\n}).call(this);\n"},"sourceMaps":{"js":{"version":3,"file":"","sourceRoot":"","sources":["node_modules/av/src/core/bitstream.coffee"],"names":[],"mappings":"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","sourcesContent":["class Bitstream\n    constructor: (@stream) ->\n        @bitPosition = 0\n\n    copy: ->\n        result = new Bitstream @stream.copy()\n        result.bitPosition = @bitPosition\n        return result\n\n    offset: -> # Should be a property\n        return 8 * @stream.offset + @bitPosition\n\n    available: (bits) ->\n        return @stream.available((bits + 8 - @bitPosition) / 8)\n\n    advance: (bits) ->\n        pos = @bitPosition + bits\n        @stream.advance(pos >> 3)\n        @bitPosition = pos & 7\n        \n    rewind: (bits) ->\n        pos = @bitPosition - bits\n        @stream.rewind(Math.abs(pos >> 3))\n        @bitPosition = pos & 7\n        \n    seek: (offset) ->\n        curOffset = @offset()\n        \n        if offset > curOffset\n            @advance offset - curOffset \n            \n        else if offset < curOffset \n            @rewind curOffset - offset\n\n    align: ->\n        unless @bitPosition is 0\n            @bitPosition = 0\n            @stream.advance(1)\n        \n    read: (bits, signed) ->\n        return 0 if bits is 0\n        \n        mBits = bits + @bitPosition\n        if mBits <= 8\n            a = ((@stream.peekUInt8() << @bitPosition) & 0xff) >>> (8 - bits)\n\n        else if mBits <= 16\n            a = ((@stream.peekUInt16() << @bitPosition) & 0xffff) >>> (16 - bits)\n\n        else if mBits <= 24\n            a = ((@stream.peekUInt24() << @bitPosition) & 0xffffff) >>> (24 - bits)\n\n        else if mBits <= 32\n            a = (@stream.peekUInt32() << @bitPosition) >>> (32 - bits)\n\n        else if mBits <= 40\n            a0 = @stream.peekUInt8(0) * 0x0100000000 # same as a << 32\n            a1 = @stream.peekUInt8(1) << 24 >>> 0\n            a2 = @stream.peekUInt8(2) << 16\n            a3 = @stream.peekUInt8(3) << 8\n            a4 = @stream.peekUInt8(4)\n\n            a = a0 + a1 + a2 + a3 + a4\n            a %= Math.pow(2, 40 - @bitPosition)                        # (a << bitPosition) & 0xffffffffff\n            a = Math.floor(a / Math.pow(2, 40 - @bitPosition - bits))  # a >>> (40 - bits)\n\n        else\n            throw new Error \"Too many bits!\"\n            \n        if signed\n            # if the sign bit is turned on, flip the bits and \n            # add one to convert to a negative value\n            if mBits < 32\n                if a >>> (bits - 1)\n                    a = ((1 << bits >>> 0) - a) * -1\n            else\n                if a / Math.pow(2, bits - 1) | 0\n                    a = (Math.pow(2, bits) - a) * -1\n\n        @advance bits\n        return a\n        \n    peek: (bits, signed) ->\n        return 0 if bits is 0\n        \n        mBits = bits + @bitPosition\n        if mBits <= 8\n            a = ((@stream.peekUInt8() << @bitPosition) & 0xff) >>> (8 - bits)\n\n        else if mBits <= 16\n            a = ((@stream.peekUInt16() << @bitPosition) & 0xffff) >>> (16 - bits)\n\n        else if mBits <= 24\n            a = ((@stream.peekUInt24() << @bitPosition) & 0xffffff) >>> (24 - bits)\n\n        else if mBits <= 32\n            a = (@stream.peekUInt32() << @bitPosition) >>> (32 - bits)\n\n        else if mBits <= 40\n            a0 = @stream.peekUInt8(0) * 0x0100000000 # same as a << 32\n            a1 = @stream.peekUInt8(1) << 24 >>> 0\n            a2 = @stream.peekUInt8(2) << 16\n            a3 = @stream.peekUInt8(3) << 8\n            a4 = @stream.peekUInt8(4)\n\n            a = a0 + a1 + a2 + a3 + a4\n            a %= Math.pow(2, 40 - @bitPosition)                        # (a << bitPosition) & 0xffffffffff\n            a = Math.floor(a / Math.pow(2, 40 - @bitPosition - bits))  # a >>> (40 - bits)\n\n        else\n            throw new Error \"Too many bits!\"\n            \n        if signed\n            # if the sign bit is turned on, flip the bits and \n            # add one to convert to a negative value\n            if mBits < 32\n                if a >>> (bits - 1)\n                    a = ((1 << bits >>> 0) - a) * -1\n            else\n                if a / Math.pow(2, bits - 1) | 0\n                    a = (Math.pow(2, bits) - a) * -1\n\n        return a\n\n    readLSB: (bits, signed) ->\n        return 0 if bits is 0\n        if bits > 40\n            throw new Error \"Too many bits!\"\n\n        mBits = bits + @bitPosition\n        a  = (@stream.peekUInt8(0)) >>> @bitPosition\n        a |= (@stream.peekUInt8(1)) << (8  - @bitPosition) if mBits > 8\n        a |= (@stream.peekUInt8(2)) << (16 - @bitPosition) if mBits > 16\n        a += (@stream.peekUInt8(3)) << (24 - @bitPosition) >>> 0 if mBits > 24            \n        a += (@stream.peekUInt8(4)) * Math.pow(2, 32 - @bitPosition) if mBits > 32\n\n        if mBits >= 32\n            a %= Math.pow(2, bits)\n        else\n            a &= (1 << bits) - 1\n            \n        if signed\n            # if the sign bit is turned on, flip the bits and \n            # add one to convert to a negative value\n            if mBits < 32\n                if a >>> (bits - 1)\n                    a = ((1 << bits >>> 0) - a) * -1\n            else\n                if a / Math.pow(2, bits - 1) | 0\n                    a = (Math.pow(2, bits) - a) * -1\n\n        @advance bits\n        return a\n        \n    peekLSB: (bits, signed) ->\n        return 0 if bits is 0\n        if bits > 40\n            throw new Error \"Too many bits!\"\n\n        mBits = bits + @bitPosition\n        a  = (@stream.peekUInt8(0)) >>> @bitPosition\n        a |= (@stream.peekUInt8(1)) << (8  - @bitPosition) if mBits > 8\n        a |= (@stream.peekUInt8(2)) << (16 - @bitPosition) if mBits > 16\n        a += (@stream.peekUInt8(3)) << (24 - @bitPosition) >>> 0 if mBits > 24            \n        a += (@stream.peekUInt8(4)) * Math.pow(2, 32 - @bitPosition) if mBits > 32\n        \n        if mBits >= 32\n            a %= Math.pow(2, bits)\n        else\n            a &= (1 << bits) - 1\n            \n        if signed\n            # if the sign bit is turned on, flip the bits and \n            # add one to convert to a negative value\n            if mBits < 32\n                if a >>> (bits - 1)\n                    a = ((1 << bits >>> 0) - a) * -1\n            else\n                if a / Math.pow(2, bits - 1) | 0\n                    a = (Math.pow(2, bits) - a) * -1\n\n        return a\n        \nmodule.exports = Bitstream\n"]}},"error":null,"hash":"2cb818c697bb8cbd9af94a48437b22b8","cacheData":{"env":{}}}