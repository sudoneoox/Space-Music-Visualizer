{"id":"node_modules/av/src/demuxers/au.coffee","dependencies":[{"name":"C:\\Users\\Diego\\Downloads\\Documents\\three js\\AbsurbPlace\\package.json","includedInParent":true,"mtime":1624288368876},{"name":"C:\\Users\\Diego\\Downloads\\Documents\\three js\\AbsurbPlace\\node_modules\\av\\package.json","includedInParent":true,"mtime":1624288427802},{"name":"../demuxer","loc":{"line":4,"column":20},"parent":"C:\\Users\\Diego\\Downloads\\Documents\\three js\\AbsurbPlace\\node_modules\\av\\src\\demuxers\\au.coffee","resolved":"C:\\Users\\Diego\\Downloads\\Documents\\three js\\AbsurbPlace\\node_modules\\av\\src\\demuxer.coffee"}],"generated":{"js":"(function() {\n  var AUDemuxer, Demuxer;\n\n  Demuxer = require('../demuxer');\n\n  AUDemuxer = (function() {\n    var bps, formats;\n\n    class AUDemuxer extends Demuxer {\n      static probe(buffer) {\n        return buffer.peekString(0, 4) === '.snd';\n      }\n\n      readChunk() {\n        var bytes, dataSize, encoding, size;\n        if (!this.readHeader && this.stream.available(24)) {\n          if (this.stream.readString(4) !== '.snd') {\n            return this.emit('error', 'Invalid AU file.');\n          }\n          size = this.stream.readUInt32();\n          dataSize = this.stream.readUInt32();\n          encoding = this.stream.readUInt32();\n          this.format = {\n            formatID: formats[encoding] || 'lpcm',\n            littleEndian: false,\n            floatingPoint: encoding === 6 || encoding === 7,\n            bitsPerChannel: bps[encoding - 1],\n            sampleRate: this.stream.readUInt32(),\n            channelsPerFrame: this.stream.readUInt32(),\n            framesPerPacket: 1\n          };\n          if (this.format.bitsPerChannel == null) {\n            return this.emit('error', 'Unsupported encoding in AU file.');\n          }\n          this.format.bytesPerPacket = (this.format.bitsPerChannel / 8) * this.format.channelsPerFrame;\n          if (dataSize !== 0xffffffff) {\n            bytes = this.format.bitsPerChannel / 8;\n            this.emit('duration', dataSize / bytes / this.format.channelsPerFrame / this.format.sampleRate * 1000 | 0);\n          }\n          this.emit('format', this.format);\n          this.readHeader = true;\n        }\n        if (this.readHeader) {\n          while (this.stream.available(1)) {\n            this.emit('data', this.stream.readSingleBuffer(this.stream.remainingBytes()));\n          }\n        }\n      }\n\n    };\n\n    Demuxer.register(AUDemuxer);\n\n    bps = [8, 8, 16, 24, 32, 32, 64];\n\n    bps[26] = 8;\n\n    formats = {\n      1: 'ulaw',\n      27: 'alaw'\n    };\n\n    return AUDemuxer;\n\n  }).call(this);\n\n}).call(this);\n"},"sourceMaps":{"js":{"version":3,"file":"","sourceRoot":"","sources":["node_modules/av/src/demuxers/au.coffee"],"names":[],"mappings":"AAAA;AAAA,MAAA,SAAA,EAAA;;EAAA,OAAA,GAAU,OAAA,CAAQ,YAAR;;EAEJ;;;IAAN,MAAA,UAAA,QAAwB,QAAxB;MAGY,OAAP,KAAO,CAAC,MAAD,CAAA;AACJ,eAAO,MAAM,CAAC,UAAP,CAAkB,CAAlB,EAAqB,CAArB,CAAA,KAA2B;MAD9B;;MAUR,SAAW,CAAA,CAAA;AACf,YAAA,KAAA,EAAA,QAAA,EAAA,QAAA,EAAA;QAAQ,IAAG,CAAI,IAAC,CAAA,UAAL,IAAoB,IAAC,CAAA,MAAM,CAAC,SAAR,CAAkB,EAAlB,CAAvB;UACI,IAAG,IAAC,CAAA,MAAM,CAAC,UAAR,CAAmB,CAAnB,CAAA,KAA2B,MAA9B;AACI,mBAAO,IAAC,CAAA,IAAD,CAAM,OAAN,EAAe,kBAAf,EADX;;UAGA,IAAA,GAAO,IAAC,CAAA,MAAM,CAAC,UAAR,CAAA;UACP,QAAA,GAAW,IAAC,CAAA,MAAM,CAAC,UAAR,CAAA;UACX,QAAA,GAAW,IAAC,CAAA,MAAM,CAAC,UAAR,CAAA;UAEX,IAAC,CAAA,MAAD,GACI;YAAA,QAAA,EAAU,OAAO,CAAC,QAAD,CAAP,IAAqB,MAA/B;YACA,YAAA,EAAc,KADd;YAEA,aAAA,EAAe,aAAa,KAAb,aAAgB,CAF/B;YAGA,cAAA,EAAgB,GAAG,CAAC,QAAA,GAAW,CAAZ,CAHnB;YAIA,UAAA,EAAY,IAAC,CAAA,MAAM,CAAC,UAAR,CAAA,CAJZ;YAKA,gBAAA,EAAkB,IAAC,CAAA,MAAM,CAAC,UAAR,CAAA,CALlB;YAMA,eAAA,EAAiB;UANjB;UAQJ,IAAO,kCAAP;AACI,mBAAO,IAAC,CAAA,IAAD,CAAM,OAAN,EAAe,kCAAf,EADX;;UAGA,IAAC,CAAA,MAAM,CAAC,cAAR,GAAyB,CAAC,IAAC,CAAA,MAAM,CAAC,cAAR,GAAyB,CAA1B,CAAA,GAA+B,IAAC,CAAA,MAAM,CAAC;UAEhE,IAAG,QAAA,KAAc,UAAjB;YACI,KAAA,GAAQ,IAAC,CAAA,MAAM,CAAC,cAAR,GAAyB;YACjC,IAAC,CAAA,IAAD,CAAM,UAAN,EAAkB,QAAA,GAAW,KAAX,GAAmB,IAAC,CAAA,MAAM,CAAC,gBAA3B,GAA8C,IAAC,CAAA,MAAM,CAAC,UAAtD,GAAmE,IAAnE,GAA0E,CAA5F,EAFJ;;UAIA,IAAC,CAAA,IAAD,CAAM,QAAN,EAAgB,IAAC,CAAA,MAAjB;UACA,IAAC,CAAA,UAAD,GAAc,KA3BlB;;QA6BA,IAAG,IAAC,CAAA,UAAJ;AACI,iBAAM,IAAC,CAAA,MAAM,CAAC,SAAR,CAAkB,CAAlB,CAAN;YACI,IAAC,CAAA,IAAD,CAAM,MAAN,EAAc,IAAC,CAAA,MAAM,CAAC,gBAAR,CAAyB,IAAC,CAAA,MAAM,CAAC,cAAR,CAAA,CAAzB,CAAd;UADJ,CADJ;;MA9BO;;IAbf;;IACI,OAAO,CAAC,QAAR,CAAiB,SAAjB;;IAKA,GAAA,GAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,EAAe,EAAf,EAAmB,EAAnB,EAAuB,EAAvB;;IACN,GAAG,CAAC,EAAD,CAAH,GAAU;;IAEV,OAAA,GACI;MAAA,CAAA,EAAG,MAAH;MACA,EAAA,EAAI;IADJ;;;;;AAZR","sourcesContent":["Demuxer = require '../demuxer'\n\nclass AUDemuxer extends Demuxer\n    Demuxer.register(AUDemuxer)\n    \n    @probe: (buffer) ->\n        return buffer.peekString(0, 4) is '.snd'\n        \n    bps = [8, 8, 16, 24, 32, 32, 64]\n    bps[26] = 8\n    \n    formats = \n        1: 'ulaw'\n        27: 'alaw'\n        \n    readChunk: ->\n        if not @readHeader and @stream.available(24)\n            if @stream.readString(4) isnt '.snd'\n                return @emit 'error', 'Invalid AU file.'\n                \n            size = @stream.readUInt32()\n            dataSize = @stream.readUInt32()\n            encoding = @stream.readUInt32()\n            \n            @format = \n                formatID: formats[encoding] or 'lpcm'\n                littleEndian: false\n                floatingPoint: encoding in [6, 7]\n                bitsPerChannel: bps[encoding - 1]\n                sampleRate: @stream.readUInt32()\n                channelsPerFrame: @stream.readUInt32()\n                framesPerPacket: 1\n            \n            if not @format.bitsPerChannel?\n                return @emit 'error', 'Unsupported encoding in AU file.'\n            \n            @format.bytesPerPacket = (@format.bitsPerChannel / 8) * @format.channelsPerFrame\n            \n            if dataSize isnt 0xffffffff\n                bytes = @format.bitsPerChannel / 8\n                @emit 'duration', dataSize / bytes / @format.channelsPerFrame / @format.sampleRate * 1000 | 0\n            \n            @emit 'format', @format\n            @readHeader = true\n            \n        if @readHeader\n            while @stream.available(1)\n                @emit 'data', @stream.readSingleBuffer(@stream.remainingBytes())\n                \n        return"]}},"error":null,"hash":"9ee55d900344b569aef8fc0a951f5ad4","cacheData":{"env":{}}}