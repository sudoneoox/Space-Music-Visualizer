{"id":"node_modules/av/src/demuxers/aiff.coffee","dependencies":[{"name":"C:\\Users\\Diego\\Downloads\\Documents\\three js\\AbsurbPlace\\package.json","includedInParent":true,"mtime":1624288368876},{"name":"C:\\Users\\Diego\\Downloads\\Documents\\three js\\AbsurbPlace\\node_modules\\av\\package.json","includedInParent":true,"mtime":1624288427802},{"name":"../demuxer","loc":{"line":4,"column":20},"parent":"C:\\Users\\Diego\\Downloads\\Documents\\three js\\AbsurbPlace\\node_modules\\av\\src\\demuxers\\aiff.coffee","resolved":"C:\\Users\\Diego\\Downloads\\Documents\\three js\\AbsurbPlace\\node_modules\\av\\src\\demuxer.coffee"}],"generated":{"js":"(function() {\n  var AIFFDemuxer, Demuxer;\n\n  Demuxer = require('../demuxer');\n\n  AIFFDemuxer = (function() {\n    class AIFFDemuxer extends Demuxer {\n      static probe(buffer) {\n        var ref;\n        return buffer.peekString(0, 4) === 'FORM' && ((ref = buffer.peekString(8, 4)) === 'AIFF' || ref === 'AIFC');\n      }\n\n      readChunk() {\n        var buffer, format, offset, ref;\n        if (!this.readStart && this.stream.available(12)) {\n          if (this.stream.readString(4) !== 'FORM') {\n            return this.emit('error', 'Invalid AIFF.');\n          }\n          this.fileSize = this.stream.readUInt32();\n          this.fileType = this.stream.readString(4);\n          this.readStart = true;\n          if ((ref = this.fileType) !== 'AIFF' && ref !== 'AIFC') {\n            return this.emit('error', 'Invalid AIFF.');\n          }\n        }\n        while (this.stream.available(1)) {\n          if (!this.readHeaders && this.stream.available(8)) {\n            this.type = this.stream.readString(4);\n            this.len = this.stream.readUInt32();\n          }\n          switch (this.type) {\n            case 'COMM':\n              if (!this.stream.available(this.len)) {\n                return;\n              }\n              this.format = {\n                formatID: 'lpcm',\n                channelsPerFrame: this.stream.readUInt16(),\n                sampleCount: this.stream.readUInt32(),\n                bitsPerChannel: this.stream.readUInt16(),\n                sampleRate: this.stream.readFloat80(),\n                framesPerPacket: 1,\n                littleEndian: false,\n                floatingPoint: false\n              };\n              this.format.bytesPerPacket = (this.format.bitsPerChannel / 8) * this.format.channelsPerFrame;\n              if (this.fileType === 'AIFC') {\n                format = this.stream.readString(4);\n                this.format.littleEndian = format === 'sowt' && this.format.bitsPerChannel > 8;\n                this.format.floatingPoint = format === 'fl32' || format === 'fl64';\n                if (format === 'twos' || format === 'sowt' || format === 'fl32' || format === 'fl64' || format === 'NONE') {\n                  format = 'lpcm';\n                }\n                this.format.formatID = format;\n                this.len -= 4;\n              }\n              this.stream.advance(this.len - 18);\n              this.emit('format', this.format);\n              this.emit('duration', this.format.sampleCount / this.format.sampleRate * 1000 | 0);\n              break;\n            case 'SSND':\n              if (!(this.readSSNDHeader && this.stream.available(4))) {\n                offset = this.stream.readUInt32();\n                this.stream.advance(4); // skip block size\n                this.stream.advance(offset); // skip to data\n                this.readSSNDHeader = true;\n              }\n              buffer = this.stream.readSingleBuffer(this.len);\n              this.len -= buffer.length;\n              this.readHeaders = this.len > 0;\n              this.emit('data', buffer);\n              break;\n            default:\n              if (!this.stream.available(this.len)) {\n                return;\n              }\n              this.stream.advance(this.len);\n          }\n          if (this.type !== 'SSND') {\n            this.readHeaders = false;\n          }\n        }\n      }\n\n    };\n\n    Demuxer.register(AIFFDemuxer);\n\n    return AIFFDemuxer;\n\n  }).call(this);\n\n}).call(this);\n"},"sourceMaps":{"js":{"version":3,"file":"","sourceRoot":"","sources":["node_modules/av/src/demuxers/aiff.coffee"],"names":[],"mappings":"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","sourcesContent":["Demuxer = require '../demuxer'\n\nclass AIFFDemuxer extends Demuxer\n    Demuxer.register(AIFFDemuxer)\n    \n    @probe: (buffer) ->\n        return buffer.peekString(0, 4) is 'FORM' && \n               buffer.peekString(8, 4) in ['AIFF', 'AIFC']\n        \n    readChunk: ->\n        if not @readStart and @stream.available(12)\n            if @stream.readString(4) isnt 'FORM'\n                return @emit 'error', 'Invalid AIFF.'\n                \n            @fileSize = @stream.readUInt32()\n            @fileType = @stream.readString(4)\n            @readStart = true\n            \n            if @fileType not in ['AIFF', 'AIFC']\n                return @emit 'error', 'Invalid AIFF.'\n        \n        while @stream.available(1)\n            if not @readHeaders and @stream.available(8)\n                @type = @stream.readString(4)\n                @len = @stream.readUInt32()\n                \n            switch @type\n                when 'COMM'\n                    return unless @stream.available(@len)\n                    \n                    @format =\n                        formatID: 'lpcm'\n                        channelsPerFrame: @stream.readUInt16()\n                        sampleCount: @stream.readUInt32()\n                        bitsPerChannel: @stream.readUInt16()\n                        sampleRate: @stream.readFloat80()\n                        framesPerPacket: 1\n                        littleEndian: false\n                        floatingPoint: false\n                        \n                    @format.bytesPerPacket = (@format.bitsPerChannel / 8) * @format.channelsPerFrame\n                    \n                    if @fileType is 'AIFC'\n                        format = @stream.readString(4)\n                        \n                        @format.littleEndian = format is 'sowt' and @format.bitsPerChannel > 8\n                        @format.floatingPoint = format in ['fl32', 'fl64']\n                        \n                        format = 'lpcm' if format in ['twos', 'sowt', 'fl32', 'fl64', 'NONE']\n                        @format.formatID = format\n                        @len -= 4\n                        \n                    @stream.advance(@len - 18)\n                    @emit 'format', @format\n                    @emit 'duration', @format.sampleCount / @format.sampleRate * 1000 | 0\n                    \n                when 'SSND'\n                    unless @readSSNDHeader and @stream.available(4)\n                        offset = @stream.readUInt32()\n                        @stream.advance(4) # skip block size\n                        @stream.advance(offset) # skip to data\n                        @readSSNDHeader = true\n                        \n                    buffer = @stream.readSingleBuffer(@len)\n                    @len -= buffer.length\n                    @readHeaders = @len > 0\n                    @emit 'data', buffer\n                    \n                else\n                    return unless @stream.available(@len)\n                    @stream.advance(@len)\n                        \n            @readHeaders = false unless @type is 'SSND'\n            \n        return"]}},"error":null,"hash":"a13d6cdfe7873c985484a466f40b9e09","cacheData":{"env":{}}}